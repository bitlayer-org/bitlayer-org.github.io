"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8291],{5257:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>u,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Build/BitlayerScanAPIs/Contracts","title":"Contracts","description":"Verify the contract through hardhat verify","source":"@site/docs/Build/BitlayerScanAPIs/Contracts.mdx","sourceDirName":"Build/BitlayerScanAPIs","slug":"/Build/BitlayerScanAPIs/Contracts","permalink":"/docs/Build/BitlayerScanAPIs/Contracts","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Contracts"},"sidebar":"buildSidebar","previous":{"title":"Accounts","permalink":"/docs/Build/BitlayerScanAPIs/Accounts"},"next":{"title":"Transactions","permalink":"/docs/Build/BitlayerScanAPIs/Transactions"}}');var a=t(4848),s=t(8453),i=t(5537),o=t(9329);const l={sidebar_position:2,title:"Contracts"},u=void 0,d={},c=[{value:"Verify the contract through hardhat verify",id:"verify-the-contract-through-hardhat-verify",level:2},{value:"An example of Hardhat Project Configuration and Contract Verification",id:"an-example-of-hardhat-project-configuration-and-contract-verification",level:3},{value:"The configuration in the hardhat.config.js file is as follows:",id:"the-configuration-in-the-hardhatconfigjs-file-is-as-follows",level:3},{value:"Steps to Verify a Contract\uff1a",id:"steps-to-verify-a-contract",level:3},{value:"Contract-related APls:",id:"contract-related-apls",level:2},{value:"Get Contract ABI for Verified Contract Source Codes",id:"get-contract-abi-for-verified-contract-source-codes",level:3},{value:"Get Contract Source Code for Verified Contract Source Codes",id:"get-contract-source-code-for-verified-contract-source-codes",level:3},{value:"Get Contract Creator and Creation Tx Hash",id:"get-contract-creator-and-creation-tx-hash",level:3},{value:"Verify Source Code (beta)",id:"verify-source-code-beta",level:3},{value:"Source Code Submission Gist (returns a guid as part of the result upon success):",id:"source-code-submission-gist-returns-a-guid-as-part-of-the-result-upon-success",level:3},{value:"Check Source code verification submission status:",id:"check-source-code-verification-submission-status",level:3},{value:"Verify Proxy Contract",id:"verify-proxy-contract",level:2},{value:"Verifying Proxy Contract using cURL",id:"verifying-proxy-contract-using-curl",level:3},{value:"Checking Proxy Contract Verification Submission Status using cURL",id:"checking-proxy-contract-verification-submission-status-using-curl",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"verify-the-contract-through-hardhat-verify",children:"Verify the contract through hardhat verify"}),"\n",(0,a.jsx)(n.p,{children:"The official recommendation of Hardhat is to use hardhat-verify along with hardhat-toolbox for custom browser API configurations and contract verification."}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsx)(n.p,{children:"Please use hardhat-verify for contract verification , hardhat-etherscan is not recommended."})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://hardhat.org/hardhat-runner/plugins/nomicfoundation-hardhat-verify",children:"https://hardhat.org/hardhat-runner/plugins/nomicfoundation-hardhat-verify"})}),"\n",(0,a.jsx)(n.h3,{id:"an-example-of-hardhat-project-configuration-and-contract-verification",children:"An example of Hardhat Project Configuration and Contract Verification"}),"\n",(0,a.jsx)(n.p,{children:"The package.json file needs to add the following dependencies:"}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsx)(n.p,{children:"Please use hardhat-verify for contract verification, hardhat-etherscan is not recommended."})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'// Adjust the version according to needs\r\n"@nomicfoundation/hardhat-toolbox": "^4.0.0",\r\n"@nomicfoundation/hardhat-verify": "^2.0.5",\r\n"hardhat": "^2.19.4"\n'})}),"\n",(0,a.jsx)(n.p,{children:"Execute the npm install command to install dependencies."}),"\n",(0,a.jsx)(n.h3,{id:"the-configuration-in-the-hardhatconfigjs-file-is-as-follows",children:"The configuration in the hardhat.config.js file is as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'require("@nomicfoundation/hardhat-toolbox"); // The toolbox library supports customChains configuration.\r\nrequire("@nomicfoundation/hardhat-verify");\r\n\r\nmodule.exports = {\r\n  solidity: {\r\n    version: "0.8.23", // Configure the solidity version for your own project, noting that the solidity version for deploying and verifying contracts should be the same.\r\n    settings: {\r\n      // Configure this part according to needs.\r\n      optimizer:{\r\n        enabled: true,\r\n        runs: 200,\r\n      }\r\n    }\r\n  },\r\n  networks: {\r\n    bitlayertestnet: {\r\n      url: \'https://testnet-rpc.bitlayer.org\', \r\n      chainId: 200810,\r\n      accounts: ["private key of your account"]\r\n    },\r\n    bitlayer: {\r\n      url: \'https://rpc.bitlayer.org\',\r\n      chainId: 200901,\r\n      accounts: ["private key of your account"]\r\n    },\r\n  },\r\n  etherscan: {\r\n    apiKey: {\r\n      // An API key needs to be written as the hardhat-verify plugin will require it, and the verification will fail if it is not provided.\r\n      // The current bitlayer browser has not yet enabled API key verification, so you can write any random string for now.\r\n      bitlayertestnet: "1234",\r\n      bitlayer: "1234"\r\n    },\r\n    customChains: [\r\n      {\r\n        network: "bitlayertestnet",\r\n        chainId: 200810,\r\n        urls: {\r\n          apiURL: "https://api-testnet.btrscan.com/scan/api",\r\n          browserURL: "https://testnet.btrscan.com/"\r\n        }\r\n      },\r\n      {\r\n        network: "bitlayer",\r\n        chainId: 200901,\r\n        urls: {\r\n          apiURL: "https://api.btrscan.com/scan/api",\r\n          browserURL: "https://www.btrscan.com/"\r\n        }\r\n      }\r\n    ]\r\n  }\r\n};\n'})}),"\n",(0,a.jsx)(n.h3,{id:"steps-to-verify-a-contract",children:"Steps to Verify a Contract\uff1a"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Contract compilation requires compiling the contract according to the configuration parameters used during deployment (such as the Solidity version, whether the optimizer is enabled, etc.), otherwise the compiled bytecode will not match the bytecode of the contract on the blockchain, and verification will not be possible."}),"\n",(0,a.jsx)(n.li,{children:"When verifying a contract, you need to specify the network, contract path, contract name, etc. If the contract constructor has parameters, you need to include the constructor arguments that were passed in during the deployment of the contract. Provide as many as there are, and if there are no parameters, you don't need to write \"constructorArguments\". Here's an example:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"npx hardhat verify --network bitlayer --contract contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy ${contract_address} constructorArguments1 constructorArguments2 constructorArguments3...\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"3",children:["\n",(0,a.jsx)(n.li,{children:"Regarding passing constructor arguments, if the constructor arguments are of complex types, such as address[] or custom structs, it can be inconvenient to pass them through the command line. Instead, you can use --constructor-args arguments.js, where arguments.js exports the parameters in order."}),"\n"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Example of an arguments.js file"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'module.exports = [\r\n  "arg0",\r\n  "arg1"\r\n];\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Example of an arguments.js file for complex types"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"For example, the contract is defined with the following constructor:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"struct Point {\r\n  uint x;\r\n  uint y;\r\n}\r\n\r\ncontract Foo {\r\n  constructor (uint x, string s, Point memory point, bytes b) { ... }\r\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Then the arguments.js file can be written like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'module.exports = [\r\n  50,\r\n  "a string argument",\r\n  {\r\n    x: 10,\r\n    y: 5,\r\n  },\r\n  // bytes have to be 0x-prefixed\r\n  "0xabcdef",\r\n];\n'})}),"\n",(0,a.jsx)(n.p,{children:"An example of using arguments.js file to pass arguments and execute the verify command is as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"npx hardhat verify --constructor-args arguments.js --contract contracts/path/path/SimpleContract.sol:SimpleContract DEPLOYED_CONTRACT_ADDRESS\n"})}),"\n",(0,a.jsx)(n.h2,{id:"contract-related-apls",children:"Contract-related APls:"}),"\n",(0,a.jsx)(n.h3,{id:"get-contract-abi-for-verified-contract-source-codes",children:"Get Contract ABI for Verified Contract Source Codes"}),"\n",(0,a.jsx)(n.p,{children:"Returns the Contract Application Binary Interface ( ABI ) of a verified smart contract."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:"https://api.btrscan.com/scan/api\r\n?module=contract\r\n&action=getabi\r\n&address=0xc9121e476155ebf0b794b7b351808af3787e727d\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Try this endpoint in your ",(0,a.jsx)(n.a,{href:"https://api.btrscan.com/scan/api?module=contract&action=getabi&address=0xc9121e476155ebf0b794b7b351808af3787e727d",children:"browser"})," \ud83d\udd17"]}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsxs)(o.A,{value:"request",label:"Request",default:!0,children:[(0,a.jsx)(n.p,{children:"Query Parameters"}),(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Parameter"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsx)(n.tbody,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"address"}),(0,a.jsxs)(n.td,{children:["the ",(0,a.jsx)(n.code,{children:"contract address"})," that has a verified source code"]})]})})]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'var Web3 = require(\'web3\');\r\nvar web3 = new Web3(new Web3.providers.HttpProvider());\r\nvar version = web3.version.api;\r\n\r\n$.getJSON(\'https://api.btrscan.com/scan/api?module=contract&action=getabi&address=0xc9121e476155ebf0b794b7b351808af3787e727d\', function (data) {\r\n\u2003var contractABI = "";\r\n\u2003\u2003contractABI = JSON.parse(data.result);\r\n\u2003if (contractABI != \'\'){\r\n\u2003\u2003var MyContract = web3.eth.contract(contractABI);\r\n\u2003\u2003var myContractInstance = MyContract.at("0xc9121e476155ebf0b794b7b351808af3787e727d");\r\n\u2003\u2003var result = myContractInstance.memberId("0xfe8ad7dd2f564a877cc23feea6c0a9cc2e783715");\r\n\u2003\u2003console.log("result1 : " + result);\r\n\u2003\u2003var result = myContractInstance.members(1);\r\n\u2003\u2003console.log("result2 : " + result);\r\n\u2003} else {\r\n\u2003\u2003console.log("Error");\r\n\u2003}\r\n});\n'})})]}),(0,a.jsxs)(o.A,{value:"response",label:"Response",children:[(0,a.jsx)(n.p,{children:"Sample Response"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\r\n  "status": 1,\r\n  "message": "OK",\r\n  "result": "[{\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"name_\\",\\"internalType\\":\\"string\\",\\"type\\":\\"string\\"},{\\"indexed\\":false,\\"name\\":\\"symbol_\\",\\"internalType\\":\\"string\\",\\"type\\":\\"string\\"}],\\"anonymous\\":false,\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"inputs\\":[{\\"indexed\\":true,\\"name\\":\\"owner\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"name\\":\\"spender\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"value\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Approval\\",\\"anonymous\\":false,\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"indexed\\":true,\\"name\\":\\"from\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"name\\":\\"to\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"value\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Transfer\\",\\"anonymous\\":false,\\"type\\":\\"event\\"},{\\"outputs\\":[{\\"name\\":\\"\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"}],\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"owner\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"spender\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"}],\\"name\\":\\"allowance\\",\\"anonymous\\":false,\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"outputs\\":[{\\"name\\":\\"\\",\\"internalType\\":\\"bool\\",\\"type\\":\\"bool\\"}],\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"spender\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"amount\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"approve\\",\\"anonymous\\":false,\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"outputs\\":[{\\"name\\":\\"\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"}],\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"account\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"}],\\"name\\":\\"balanceOf\\",\\"anonymous\\":false,\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"outputs\\":[{\\"name\\":\\"\\",\\"internalType\\":\\"uint8\\",\\"type\\":\\"uint8\\"}],\\"inputs\\":[],\\"name\\":\\"decimals\\",\\"anonymous\\":false,\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"outputs\\":[{\\"name\\":\\"\\",\\"internalType\\":\\"bool\\",\\"type\\":\\"bool\\"}],\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"spender\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"subtractedValue\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"decreaseAllowance\\",\\"anonymous\\":false,\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"outputs\\":[{\\"name\\":\\"\\",\\"internalType\\":\\"bool\\",\\"type\\":\\"bool\\"}],\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"spender\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"addedValue\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"increaseAllowance\\",\\"anonymous\\":false,\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"outputs\\":[{\\"name\\":\\"\\",\\"internalType\\":\\"string\\",\\"type\\":\\"string\\"}],\\"inputs\\":[],\\"name\\":\\"name\\",\\"anonymous\\":false,\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"outputs\\":[{\\"name\\":\\"\\",\\"internalType\\":\\"string\\",\\"type\\":\\"string\\"}],\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"anonymous\\":false,\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"outputs\\":[{\\"name\\":\\"\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"}],\\"inputs\\":[],\\"name\\":\\"totalSupply\\",\\"anonymous\\":false,\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"outputs\\":[{\\"name\\":\\"\\",\\"internalType\\":\\"bool\\",\\"type\\":\\"bool\\"}],\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"to\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"amount\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transfer\\",\\"anonymous\\":false,\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"outputs\\":[{\\"name\\":\\"\\",\\"internalType\\":\\"bool\\",\\"type\\":\\"bool\\"}],\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"from\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"to\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"amount\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transferFrom\\",\\"anonymous\\":false,\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}]"\r\n}\n'})})]})]}),"\n",(0,a.jsx)(n.h3,{id:"get-contract-source-code-for-verified-contract-source-codes",children:"Get Contract Source Code for Verified Contract Source Codes"}),"\n",(0,a.jsx)(n.p,{children:"Returns the source code of a verified smart contract."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:"https://api.btrscan.com/scan/api\r\n?module=contract\r\n&action=getsourcecode\r\n&address=0xc9121e476155ebf0b794b7b351808af3787e727d\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Try this endpoint in your ",(0,a.jsx)(n.a,{href:"https://api.btrscan.com/scan/api?module=contract&action=getsourcecode&address=0xc9121e476155ebf0b794b7b351808af3787e727d",children:"browser"})," \ud83d\udd17"]}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsxs)(o.A,{value:"request",label:"Request",default:!0,children:[(0,a.jsx)(n.p,{children:"Query Parameters"}),(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Parameter"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsx)(n.tbody,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"address"}),(0,a.jsxs)(n.td,{children:["the ",(0,a.jsx)(n.code,{children:"contract address"})," that has a verified source code"]})]})})]})]}),(0,a.jsxs)(o.A,{value:"response",label:"Response",children:[(0,a.jsx)(n.p,{children:"sample response"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:' {  \r\n  "status":"1",\r\n  "message":"OK",\r\n  "result":[\r\n    "proxy": "",\r\n    "evmversion": "default",\r\n    "abi": "[{\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"contractName\\",\\"internalType\\":\\"string\\",\\"type\\":\\"string\\"}],\\"anonymous\\":false,\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"target\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"}],\\"name\\":\\"AddressEmptyCode\\",\\"anonymous\\":false,\\"type\\":\\"error\\"},{\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"account\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"}],\\"name\\":\\"AddressInsufficientBalance\\",\\"anonymous\\":false,\\"type\\":\\"error\\"},{\\"inputs\\":[],\\"name\\":\\"ECDSAInvalidSignature\\",\\"anonymous\\":false,\\"type\\":\\"error\\"},{\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"length\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"ECDSAInvalidSignatureLength\\",\\"anonymous\\":false,\\"type\\":\\"error\\"},{\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"s\\",\\"internalType\\":\\"bytes32\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"ECDSAInvalidSignatureS\\",\\"anonymous\\":false,\\"type\\":\\"error\\"},{\\"inputs\\":[],\\"name\\":\\"FailedInnerCall\\",\\"anonymous\\":false,\\"type\\":\\"error\\"},{\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"account\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"currentNonce\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"InvalidAccountNonce\\",\\"anonymous\\":false,\\"type\\":\\"error\\"},{\\"inputs\\":[],\\"name\\":\\"InvalidShortString\\",\\"anonymous\\":false,\\"type\\":\\"error\\"},{\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"token\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"}],\\"name\\":\\"SafeERC20FailedOperation\\",\\"anonymous\\":false,\\"type\\":\\"error\\"},{\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"str\\",\\"internalType\\":\\"string\\",\\"type\\":\\"string\\"}],\\"name\\":\\"StringTooLong\\",\\"anonymous\\":false,\\"type\\":\\"error\\"},{\\"inputs\\":[],\\"name\\":\\"EIP712DomainChanged\\",\\"anonymous\\":false,\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"indexed\\":true,\\"name\\":\\"approver\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"tokenAddress\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"amountIn\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":false,\\"name\\":\\"amountOut\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":false,\\"name\\":\\"deadline\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"PermitAndSwap\\",\\"anonymous\\":false,\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"sender\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"value\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Received\\",\\"anonymous\\":false,\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"newValue\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"SetMaxOutput\\",\\"anonymous\\":false,\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"newOp\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"on\\",\\"internalType\\":\\"bool\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"SetOperator\\",\\"anonymous\\":false,\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"valut\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"status\\",\\"internalType\\":\\"bool\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"SetVaults\\",\\"anonymous\\":false,\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"newOwner\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"}],\\"name\\":\\"TransferOwnership\\",\\"anonymous\\":false,\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"tokenAddress\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"receiver\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"amount\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Withdrawn\\",\\"anonymous\\":false,\\"type\\":\\"event\\"},{\\"outputs\\":[{\\"name\\":\\"\\",\\"internalType\\":\\"bytes32\\",\\"type\\":\\"bytes32\\"}],\\"inputs\\":[],\\"name\\":\\"DOMAIN_SEPARATOR\\",\\"anonymous\\":false,\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"outputs\\":[{\\"name\\":\\"\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"}],\\"inputs\\":[],\\"name\\":\\"MAX_BTC_AMOUNT\\",\\"anonymous\\":false,\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"outputs\\":[{\\"name\\":\\"fields\\",\\"internalType\\":\\"bytes1\\",\\"type\\":\\"bytes1\\"},{\\"name\\":\\"name\\",\\"internalType\\":\\"string\\",\\"type\\":\\"string\\"},{\\"name\\":\\"version\\",\\"internalType\\":\\"string\\",\\"type\\":\\"string\\"},{\\"name\\":\\"chainId\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"},{\\"name\\":\\"verifyingContract\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"name\\":\\"salt\\",\\"internalType\\":\\"bytes32\\",\\"type\\":\\"bytes32\\"},{\\"name\\":\\"extensions\\",\\"internalType\\":\\"uint256[]\\",\\"type\\":\\"uint256[]\\"}],\\"inputs\\":[],\\"name\\":\\"eip712Domain\\",\\"anonymous\\":false,\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"outputs\\":[{\\"name\\":\\"\\",\\"internalType\\":\\"string\\",\\"type\\":\\"string\\"}],\\"inputs\\":[],\\"name\\":\\"name\\",\\"anonymous\\":false,\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"outputs\\":[{\\"name\\":\\"\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"}],\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"_owner\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"}],\\"name\\":\\"nonces\\",\\"anonymous\\":false,\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"outputs\\":[{\\"name\\":\\"\\",\\"internalType\\":\\"bool\\",\\"type\\":\\"bool\\"}],\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"}],\\"name\\":\\"operators\\",\\"anonymous\\":false,\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"outputs\\":[{\\"name\\":\\"\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"}],\\"inputs\\":[],\\"name\\":\\"owner\\",\\"anonymous\\":false,\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"outputs\\":[],\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"approver\\",\\"internalType\\":\\"address payable\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"tokenAddress\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"amountIn\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":false,\\"name\\":\\"deadline\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":false,\\"name\\":\\"price\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":false,\\"name\\":\\"amountOut\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":false,\\"name\\":\\"permitSig\\",\\"internalType\\":\\"bytes\\",\\"type\\":\\"bytes\\"},{\\"indexed\\":false,\\"name\\":\\"swapSig\\",\\"internalType\\":\\"bytes\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"permitAndSwap\\",\\"anonymous\\":false,\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"outputs\\":[],\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"newValue\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"setMaxOutput\\",\\"anonymous\\":false,\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"outputs\\":[],\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"newOp\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"_on\\",\\"internalType\\":\\"bool\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"setOperator\\",\\"anonymous\\":false,\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"outputs\\":[],\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"valut\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"status\\",\\"internalType\\":\\"bool\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"setVaults\\",\\"anonymous\\":false,\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"outputs\\":[],\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"newOwner\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"anonymous\\":false,\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"outputs\\":[{\\"name\\":\\"\\",\\"internalType\\":\\"bool\\",\\"type\\":\\"bool\\"}],\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"}],\\"name\\":\\"vaults\\",\\"anonymous\\":false,\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"outputs\\":[],\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"receiver\\",\\"internalType\\":\\"address payable\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"amount\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"withdrawBTC\\",\\"anonymous\\":false,\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"outputs\\":[],\\"inputs\\":[{\\"indexed\\":false,\\"name\\":\\"tokenAddress\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"receiver\\",\\"internalType\\":\\"address\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"name\\":\\"amount\\",\\"internalType\\":\\"uint256\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"withdrawERC20\\",\\"anonymous\\":false,\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"anonymous\\":false,\\"stateMutability\\":\\"payable\\",\\"type\\":\\"receive\\"}]",\r\n    "optimizationUsed": "0",\r\n    "runs": "200",\r\n    "licenseType": "None",\r\n    "compilerVersion": "v0.8.20+commit.a1b79de6",\r\n    "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000d546f6b656e45786368616e676500000000000000000000000000000000000000",\r\n    "swarmSource": "",\r\n    "library": "",\r\n    "implementation": "",\r\n    "contractName": "TokenExchange",\r\n    "SourceCode": "{\\"language\\":\\"Solidity\\",\\"sources\\":{\\"@openzeppelin/contracts/interfaces/IERC5267.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\ninterface IERC5267 {\\\\n /**\\\\n * @dev MAY be emitted to signal that the domain could have changed.\\\\n */\\\\n event EIP712DomainChanged();\\\\n\\\\n /**\\\\n * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\\\n * signature.\\\\n */\\\\n function eip712Domain()\\\\n external\\\\n view\\\\n returns (\\\\n bytes1 fields,\\\\n string memory name,\\\\n string memory version,\\\\n uint256 chainId,\\\\n address verifyingContract,\\\\n bytes32 salt,\\\\n uint256[] memory extensions\\\\n );\\\\n}\\\\n\\"},\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\\\n *\\\\n * Adds the {permit} method, which can be used to change an account\'s ERC20 allowance (see {IERC20-allowance}) by\\\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn\'t\\\\n * need to send a transaction, and thus is not required to hold Ether at all.\\\\n *\\\\n * ==== Security Considerations\\\\n *\\\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\\\n * generally recommended is:\\\\n *\\\\n * ```solidity\\\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\\\n * try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\\\n * doThing(..., value);\\\\n * }\\\\n *\\\\n * function doThing(..., uint256 value) public {\\\\n * token.safeTransferFrom(msg.sender, address(this), value);\\\\n * ...\\\\n * }\\\\n * ```\\\\n *\\\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\\\n * {SafeERC20-safeTransferFrom}).\\\\n *\\\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\\\n * contracts should have entry points that don\'t rely on permit.\\\\n */\\\\ninterface IERC20Permit {\\\\n /**\\\\n * @dev Sets `value` as the allowance of `spender` over ``owner``\'s tokens,\\\\n * given ``owner``\'s signed approval.\\\\n *\\\\n * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\\\n * ordering also apply here.\\\\n *\\\\n * Emits an {Approval} event.\\\\n *\\\\n * Requirements:\\\\n *\\\\n * - `spender` cannot be the zero address.\\\\n * - `deadline` must be a timestamp in the future.\\\\n * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\\\n * over the EIP712-formatted function arguments.\\\\n * - the signature must use ``owner``\'s current nonce (see {nonces}).\\\\n *\\\\n * For more information on the signature format, see the\\\\n * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\\\n * section].\\\\n *\\\\n * CAUTION: See Security Considerations above.\\\\n */\\\\n function permit(\\\\n address owner,\\\\n address spender,\\\\n uint256 value,\\\\n uint256 deadline,\\\\n uint8 v,\\\\n bytes32 r,\\\\n bytes32 s\\\\n ) external;\\\\n\\\\n /**\\\\n * @dev Returns the current nonce for `owner`. This value must be\\\\n * included whenever a signature is generated for {permit}.\\\\n *\\\\n * Every successful call to {permit} increases ``owner``\'s nonce by one. This\\\\n * prevents a signature from being used multiple times.\\\\n */\\\\n function nonces(address owner) external view returns (uint256);\\\\n\\\\n /**\\\\n * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\\\n */\\\\n // solhint-disable-next-line func-name-mixedcase\\\\n function DOMAIN_SEPARATOR() external view returns (bytes32);\\\\n}\\\\n\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n /**\\\\n * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n * another (`to`).\\\\n *\\\\n * Note that `value` may be zero.\\\\n */\\\\n event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n /**\\\\n * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n * a call to {approve}. `value` is the new allowance.\\\\n */\\\\n event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n\\\\n /**\\\\n * @dev Returns the value of tokens in existence.\\\\n */\\\\n function totalSupply() external view returns (uint256);\\\\n\\\\n /**\\\\n * @dev Returns the value of tokens owned by `account`.\\\\n */\\\\n function balanceOf(address account) external view returns (uint256);\\\\n\\\\n /**\\\\n * @dev Moves a `value` amount of tokens from the caller\'s account to `to`.\\\\n *\\\\n * Returns a boolean value indicating whether the operation succeeded.\\\\n *\\\\n * Emits a {Transfer} event.\\\\n */\\\\n function transfer(address to, uint256 value) external returns (bool);\\\\n\\\\n /**\\\\n * @dev Returns the remaining number of tokens that `spender` will be\\\\n * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n * zero by default.\\\\n *\\\\n * This value changes when {approve} or {transferFrom} are called.\\\\n */\\\\n function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n /**\\\\n * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\\\n * caller\'s tokens.\\\\n *\\\\n * Returns a boolean value indicating whether the operation succeeded.\\\\n *\\\\n * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n * that someone may use both the old and the new allowance by unfortunate\\\\n * transaction ordering. One possible solution to mitigate this race\\\\n * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n * desired value afterwards:\\\\n * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n *\\\\n * Emits an {Approval} event.\\\\n */\\\\n function approve(address spender, uint256 value) external returns (bool);\\\\n\\\\n /**\\\\n * @dev Moves a `value` amount of tokens from `from` to `to` using the\\\\n * allowance mechanism. `value` is then deducted from the caller\'s\\\\n * allowance.\\\\n *\\\\n * Returns a boolean value indicating whether the operation succeeded.\\\\n *\\\\n * Emits a {Transfer} event.\\\\n */\\\\n function transferFrom(address from, address to, uint256 value) external returns (bool);\\\\n}\\\\n\\"},\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {IERC20} from \\\\\\"../IERC20.sol\\\\\\";\\\\nimport {IERC20Permit} from \\\\\\"../extensions/IERC20Permit.sol\\\\\\";\\\\nimport {Address} from \\\\\\"../../../utils/Address.sol\\\\\\";\\\\n\\\\n/**\\\\n * @title SafeERC20\\\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\\\n * contract returns false). Tokens that return no value (and instead revert or\\\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\\\n * successful.\\\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\\\n */\\\\nlibrary SafeERC20 {\\\\n using Address for address;\\\\n\\\\n /**\\\\n * @dev An operation with an ERC20 token failed.\\\\n */\\\\n error SafeERC20FailedOperation(address token);\\\\n\\\\n /**\\\\n * @dev Indicates a failed `decreaseAllowance` request.\\\\n */\\\\n error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\\\n\\\\n /**\\\\n * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\\\n * non-reverting calls are assumed to be successful.\\\\n */\\\\n function safeTransfer(IERC20 token, address to, uint256 value) internal {\\\\n _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\\\n }\\\\n\\\\n /**\\\\n * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\\\n * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\\\n */\\\\n function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\\\n _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\\\n }\\\\n\\\\n /**\\\\n * @dev Increase the calling contract\'s allowance toward `spender` by `value`. If `token` returns no value,\\\\n * non-reverting calls are assumed to be successful.\\\\n */\\\\n function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\\\n uint256 oldAllowance = token.allowance(address(this), spender);\\\\n forceApprove(token, spender, oldAllowance + value);\\\\n }\\\\n\\\\n /**\\\\n * @dev Decrease the calling contract\'s allowance toward `spender` by `requestedDecrease`. If `token` returns no\\\\n * value, non-reverting calls are assumed to be successful.\\\\n */\\\\n function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\\\n unchecked {\\\\n uint256 currentAllowance = token.allowance(address(this), spender);\\\\n if (currentAllowance < requestedDecrease) {\\\\n revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\\\n }\\\\n forceApprove(token, spender, currentAllowance - requestedDecrease);\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Set the calling contract\'s allowance toward `spender` to `value`. If `token` returns no value,\\\\n * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\\\n * to be set to zero before setting it to a non-zero value, such as USDT.\\\\n */\\\\n function forceApprove(IERC20 token, address spender, uint256 value) internal {\\\\n bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\\\n\\\\n if (!_callOptionalReturnBool(token, approvalCall)) {\\\\n _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\\\n _callOptionalReturn(token, approvalCall);\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\\\n * on the return value: the return value is optional (but if data is returned, it must not be false).\\\\n * @param token The token targeted by the call.\\\\n * @param data The call data (encoded using abi.encode or one of its variants).\\\\n */\\\\n function _callOptionalReturn(IERC20 token, bytes memory data) private {\\\\n // We need to perform a low level call here, to bypass Solidity\'s return data size checking mechanism, since\\\\n // we\'re implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\\\n // the target address contains contract code and also asserts for success in the low-level call.\\\\n\\\\n bytes memory returndata = address(token).functionCall(data);\\\\n if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\\\n revert SafeERC20FailedOperation(address(token));\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\\\n * on the return value: the return value is optional (but if data is returned, it must not be false).\\\\n * @param token The token targeted by the call.\\\\n * @param data The call data (encoded using abi.encode or one of its variants).\\\\n *\\\\n * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\\\n */\\\\n function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\\\n // We need to perform a low level call here, to bypass Solidity\'s return data size checking mechanism, since\\\\n // we\'re implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\\\n // and not revert is the subcall reverts.\\\\n\\\\n (bool success, bytes memory returndata) = address(token).call(data);\\\\n return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\\\n }\\\\n}\\\\n\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n /**\\\\n * @dev The ETH balance of the account is not enough to perform the operation.\\\\n */\\\\n error AddressInsufficientBalance(address account);\\\\n\\\\n /**\\\\n * @dev There\'s no code at `target` (it is not a contract).\\\\n */\\\\n error AddressEmptyCode(address target);\\\\n\\\\n /**\\\\n * @dev A call to an address target failed. The target may have reverted.\\\\n */\\\\n error FailedInnerCall();\\\\n\\\\n /**\\\\n * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n * `recipient`, forwarding all available gas and reverting on errors.\\\\n *\\\\n * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n * imposed by `transfer`, making them unable to receive funds via\\\\n * `transfer`. {sendValue} removes this limitation.\\\\n *\\\\n * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n *\\\\n * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n * taken to not create reentrancy vulnerabilities. Consider using\\\\n * {ReentrancyGuard} or the\\\\n * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n */\\\\n function sendValue(address payable recipient, uint256 amount) internal {\\\\n if (address(this).balance < amount) {\\\\n revert AddressInsufficientBalance(address(this));\\\\n }\\\\n\\\\n (bool success, ) = recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n if (!success) {\\\\n revert FailedInnerCall();\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Performs a Solidity function call using a low level `call`. A\\\\n * plain `call` is an unsafe replacement for a function call: use this\\\\n * function instead.\\\\n *\\\\n * If `target` reverts with a revert reason or custom error, it is bubbled\\\\n * up by this function (like regular Solidity function calls). However, if\\\\n * the call reverted with no returned reason, this function reverts with a\\\\n * {FailedInnerCall} error.\\\\n *\\\\n * Returns the raw returned data. To convert to the expected return value,\\\\n * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n *\\\\n * Requirements:\\\\n *\\\\n * - `target` must be a contract.\\\\n * - calling `target` with `data` must not revert.\\\\n */\\\\n function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n return functionCallWithValue(target, data, 0);\\\\n }\\\\n\\\\n /**\\\\n * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n * but also transferring `value` wei to `target`.\\\\n *\\\\n * Requirements:\\\\n *\\\\n * - the calling contract must have an ETH balance of at least `value`.\\\\n * - the called Solidity function must be `payable`.\\\\n */\\\\n function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n if (address(this).balance < value) {\\\\n revert AddressInsufficientBalance(address(this));\\\\n }\\\\n (bool success, bytes memory returndata) = target.call{value: value}(data);\\\\n return verifyCallResultFromTarget(target, success, returndata);\\\\n }\\\\n\\\\n /**\\\\n * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n * but performing a static call.\\\\n */\\\\n function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\\\n (bool success, bytes memory returndata) = target.staticcall(data);\\\\n return verifyCallResultFromTarget(target, success, returndata);\\\\n }\\\\n\\\\n /**\\\\n * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n * but performing a delegate call.\\\\n */\\\\n function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n (bool success, bytes memory returndata) = target.delegatecall(data);\\\\n return verifyCallResultFromTarget(target, success, returndata);\\\\n }\\\\n\\\\n /**\\\\n * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\\\n * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\\\n * unsuccessful call.\\\\n */\\\\n function verifyCallResultFromTarget(\\\\n address target,\\\\n bool success,\\\\n bytes memory returndata\\\\n ) internal view returns (bytes memory) {\\\\n if (!success) {\\\\n _revert(returndata);\\\\n } else {\\\\n // only check if target is a contract if the call was successful and the return data is empty\\\\n // otherwise we already know that it was a contract\\\\n if (returndata.length == 0 && target.code.length == 0) {\\\\n revert AddressEmptyCode(target);\\\\n }\\\\n return returndata;\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Tool to verify that a low level call was successful, and reverts if it wasn\'t, either by bubbling the\\\\n * revert reason or with a default {FailedInnerCall} error.\\\\n */\\\\n function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\\\n if (!success) {\\\\n _revert(returndata);\\\\n } else {\\\\n return returndata;\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\\\n */\\\\n function _revert(bytes memory returndata) private pure {\\\\n // Look for revert reason and bubble it up if present\\\\n if (returndata.length > 0) {\\\\n // The easiest way to bubble the revert reason is using memory via assembly\\\\n /// @solidity memory-safe-assembly\\\\n assembly {\\\\n let returndata_size := mload(returndata)\\\\n revert(add(32, returndata), returndata_size)\\\\n }\\\\n } else {\\\\n revert FailedInnerCall();\\\\n }\\\\n }\\\\n}\\\\n\\"},\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\\\n *\\\\n * These functions can be used to verify that a message was signed by the holder\\\\n * of the private keys of a given address.\\\\n */\\\\nlibrary ECDSA {\\\\n enum RecoverError {\\\\n NoError,\\\\n InvalidSignature,\\\\n InvalidSignatureLength,\\\\n InvalidSignatureS\\\\n }\\\\n\\\\n /**\\\\n * @dev The signature derives the `address(0)`.\\\\n */\\\\n error ECDSAInvalidSignature();\\\\n\\\\n /**\\\\n * @dev The signature has an invalid length.\\\\n */\\\\n error ECDSAInvalidSignatureLength(uint256 length);\\\\n\\\\n /**\\\\n * @dev The signature has an S value that is in the upper half order.\\\\n */\\\\n error ECDSAInvalidSignatureS(bytes32 s);\\\\n\\\\n /**\\\\n * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\\\n * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\\\n * and a bytes32 providing additional information about the error.\\\\n *\\\\n * If no error is returned, then the address can be used for verification purposes.\\\\n *\\\\n * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\\\n * this function rejects them by requiring the `s` value to be in the lower\\\\n * half order, and the `v` value to be either 27 or 28.\\\\n *\\\\n * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\\\n * verification to be secure: it is possible to craft signatures that\\\\n * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\\\n * this is by receiving a hash of the original message (which may otherwise\\\\n * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\\\n *\\\\n * Documentation for signature generation:\\\\n * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\\\n * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\\\n */\\\\n function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\\\n if (signature.length == 65) {\\\\n bytes32 r;\\\\n bytes32 s;\\\\n uint8 v;\\\\n // ecrecover takes the signature parameters, and the only way to get them\\\\n // currently is to use assembly.\\\\n /// @solidity memory-safe-assembly\\\\n assembly {\\\\n r := mload(add(signature, 0x20))\\\\n s := mload(add(signature, 0x40))\\\\n v := byte(0, mload(add(signature, 0x60)))\\\\n }\\\\n return tryRecover(hash, v, r, s);\\\\n } else {\\\\n return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns the address that signed a hashed message (`hash`) with\\\\n * `signature`. This address can then be used for verification purposes.\\\\n *\\\\n * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\\\n * this function rejects them by requiring the `s` value to be in the lower\\\\n * half order, and the `v` value to be either 27 or 28.\\\\n *\\\\n * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\\\n * verification to be secure: it is possible to craft signatures that\\\\n * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\\\n * this is by receiving a hash of the original message (which may otherwise\\\\n * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\\\n */\\\\n function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\\\n (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\\\n _throwError(error, errorArg);\\\\n return recovered;\\\\n }\\\\n\\\\n /**\\\\n * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\\\n *\\\\n * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\\\n */\\\\n function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\\\n unchecked {\\\\n bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\\\n // We do not check for an overflow here since the shift operation results in 0 or 1.\\\\n uint8 v = uint8((uint256(vs) >> 255) + 27);\\\\n return tryRecover(hash, v, r, s);\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\\\n */\\\\n function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\\\n (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\\\n _throwError(error, errorArg);\\\\n return recovered;\\\\n }\\\\n\\\\n /**\\\\n * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\\\n * `r` and `s` signature fields separately.\\\\n */\\\\n function tryRecover(\\\\n bytes32 hash,\\\\n uint8 v,\\\\n bytes32 r,\\\\n bytes32 s\\\\n ) internal pure returns (address, RecoverError, bytes32) {\\\\n // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\\\n // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\\\n // the valid range for s in (301): 0 < s < secp256k1n \xf7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\\\n // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\\\n //\\\\n // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\\\n // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\\\n // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\\\n // these malleable signatures as well.\\\\n if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\\\n return (address(0), RecoverError.InvalidSignatureS, s);\\\\n }\\\\n\\\\n // If the signature is valid (and not malleable), return the signer address\\\\n address signer = ecrecover(hash, v, r, s);\\\\n if (signer == address(0)) {\\\\n return (address(0), RecoverError.InvalidSignature, bytes32(0));\\\\n }\\\\n\\\\n return (signer, RecoverError.NoError, bytes32(0));\\\\n }\\\\n\\\\n /**\\\\n * @dev Overload of {ECDSA-recover} that receives the `v`,\\\\n * `r` and `s` signature fields separately.\\\\n */\\\\n function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\\\n (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\\\n _throwError(error, errorArg);\\\\n return recovered;\\\\n }\\\\n\\\\n /**\\\\n * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\\\n */\\\\n function _throwError(RecoverError error, bytes32 errorArg) private pure {\\\\n if (error == RecoverError.NoError) {\\\\n return; // no error: do nothing\\\\n } else if (error == RecoverError.InvalidSignature) {\\\\n revert ECDSAInvalidSignature();\\\\n } else if (error == RecoverError.InvalidSignatureLength) {\\\\n revert ECDSAInvalidSignatureLength(uint256(errorArg));\\\\n } else if (error == RecoverError.InvalidSignatureS) {\\\\n revert ECDSAInvalidSignatureS(errorArg);\\\\n }\\\\n }\\\\n}\\\\n\\"},\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {MessageHashUtils} from \\\\\\"./MessageHashUtils.sol\\\\\\";\\\\nimport {ShortStrings, ShortString} from \\\\\\"../ShortStrings.sol\\\\\\";\\\\nimport {IERC5267} from \\\\\\"../../interfaces/IERC5267.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\\\n *\\\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\\\n *\\\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\\\n * ({_hashTypedDataV4}).\\\\n *\\\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\\\n *\\\\n * NOTE: This contract implements the version of the encoding known as \\\\\\"v4\\\\\\", as implemented by the JSON RPC method\\\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\\\n *\\\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\\\n *\\\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\\\n */\\\\nabstract contract EIP712 is IERC5267 {\\\\n using ShortStrings for *;\\\\n\\\\n bytes32 private constant TYPE_HASH =\\\\n keccak256(\\\\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\\\\");\\\\n\\\\n // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\\\n // invalidate the cached domain separator if the chain id changes.\\\\n bytes32 private immutable _cachedDomainSeparator;\\\\n uint256 private immutable _cachedChainId;\\\\n address private immutable _cachedThis;\\\\n\\\\n bytes32 private immutable _hashedName;\\\\n bytes32 private immutable _hashedVersion;\\\\n\\\\n ShortString private immutable _name;\\\\n ShortString private immutable _version;\\\\n string private _nameFallback;\\\\n string private _versionFallback;\\\\n\\\\n /**\\\\n * @dev Initializes the domain separator and parameter caches.\\\\n *\\\\n * The meaning of `name` and `version` is specified in\\\\n * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\\\n *\\\\n * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\\\n * - `version`: the current major version of the signing domain.\\\\n *\\\\n * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\\\n * contract upgrade].\\\\n */\\\\n constructor(string memory name, string memory version) {\\\\n _name = name.toShortStringWithFallback(_nameFallback);\\\\n _version = version.toShortStringWithFallback(_versionFallback);\\\\n _hashedName = keccak256(bytes(name));\\\\n _hashedVersion = keccak256(bytes(version));\\\\n\\\\n _cachedChainId = block.chainid;\\\\n _cachedDomainSeparator = _buildDomainSeparator();\\\\n _cachedThis = address(this);\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns the domain separator for the current chain.\\\\n */\\\\n function _domainSeparatorV4() internal view returns (bytes32) {\\\\n if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\\\n return _cachedDomainSeparator;\\\\n } else {\\\\n return _buildDomainSeparator();\\\\n }\\\\n }\\\\n\\\\n function _buildDomainSeparator() private view returns (bytes32) {\\\\n return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\\\n }\\\\n\\\\n /**\\\\n * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\\\n * function returns the hash of the fully encoded EIP712 message for this domain.\\\\n *\\\\n * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\\\n *\\\\n * ```solidity\\\\n * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\\\n * keccak256(\\\\\\"Mail(address to,string contents)\\\\\\"),\\\\n * mailTo,\\\\n * keccak256(bytes(mailContents))\\\\n * )));\\\\n * address signer = ECDSA.recover(digest, signature);\\\\n * ```\\\\n */\\\\n function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\\\n return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\\\n }\\\\n\\\\n /**\\\\n * @dev See {IERC-5267}.\\\\n */\\\\n function eip712Domain()\\\\n public\\\\n view\\\\n virtual\\\\n returns (\\\\n bytes1 fields,\\\\n string memory name,\\\\n string memory version,\\\\n uint256 chainId,\\\\n address verifyingContract,\\\\n bytes32 salt,\\\\n uint256[] memory extensions\\\\n )\\\\n {\\\\n return (\\\\n hex\\\\\\"0f\\\\\\", // 01111\\\\n _EIP712Name(),\\\\n _EIP712Version(),\\\\n block.chainid,\\\\n address(this),\\\\n bytes32(0),\\\\n new uint256[](0)\\\\n );\\\\n }\\\\n\\\\n /**\\\\n * @dev The name parameter for the EIP712 domain.\\\\n *\\\\n * NOTE: By default this function reads _name which is an immutable value.\\\\n * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\\\n */\\\\n // solhint-disable-next-line func-name-mixedcase\\\\n function _EIP712Name() internal view returns (string memory) {\\\\n return _name.toStringWithFallback(_nameFallback);\\\\n }\\\\n\\\\n /**\\\\n * @dev The version parameter for the EIP712 domain.\\\\n *\\\\n * NOTE: By default this function reads _version which is an immutable value.\\\\n * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\\\n */\\\\n // solhint-disable-next-line func-name-mixedcase\\\\n function _EIP712Version() internal view returns (string memory) {\\\\n return _version.toStringWithFallback(_versionFallback);\\\\n }\\\\n}\\\\n\\"},\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {Strings} from \\\\\\"../Strings.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\\\n *\\\\n * The library provides methods for generating a hash of a message that conforms to the\\\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\\\n * specifications.\\\\n */\\\\nlibrary MessageHashUtils {\\\\n /**\\\\n * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\\\n * `0x45` (`personal_sign` messages).\\\\n *\\\\n * The digest is calculated by prefixing a bytes32 `messageHash` with\\\\n * `\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n32\\\\\\"` and hashing the result. It corresponds with the\\\\n * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\\\n *\\\\n * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\\\n * keccak256, although any bytes32 value can be safely used because the final digest will\\\\n * be re-hashed.\\\\n *\\\\n * See {ECDSA-recover}.\\\\n */\\\\n function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\\\n /// @solidity memory-safe-assembly\\\\n assembly {\\\\n mstore(0x00, \\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n32\\\\\\") // 32 is the bytes-length of messageHash\\\\n mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\\\n digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\\\n * `0x45` (`personal_sign` messages).\\\\n *\\\\n * The digest is calculated by prefixing an arbitrary `message` with\\\\n * `\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n\\\\\\" + len(message)` and hashing the result. It corresponds with the\\\\n * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\\\n *\\\\n * See {ECDSA-recover}.\\\\n */\\\\n function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\\\n return\\\\n keccak256(bytes.concat(\\\\\\"\\\\\\\\x19Ethereum Signed Message:\\\\\\\\n\\\\\\", bytes(Strings.toString(message.length)), message));\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\\\n * `0x00` (data with intended validator).\\\\n *\\\\n * The digest is calculated by prefixing an arbitrary `data` with `\\\\\\"\\\\\\\\x19\\\\\\\\x00\\\\\\"` and the intended\\\\n * `validator` address. Then hashing the result.\\\\n *\\\\n * See {ECDSA-recover}.\\\\n */\\\\n function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\\\n return keccak256(abi.encodePacked(hex\\\\\\"19_00\\\\\\", validator, data));\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\\\n *\\\\n * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\\\n * `\\\\\\\\x19\\\\\\\\x01` and hashing the result. It corresponds to the hash signed by the\\\\n * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\\\n *\\\\n * See {ECDSA-recover}.\\\\n */\\\\n function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\\\n /// @solidity memory-safe-assembly\\\\n assembly {\\\\n let ptr := mload(0x40)\\\\n mstore(ptr, hex\\\\\\"19_01\\\\\\")\\\\n mstore(add(ptr, 0x02), domainSeparator)\\\\n mstore(add(ptr, 0x22), structHash)\\\\n digest := keccak256(ptr, 0x42)\\\\n }\\\\n }\\\\n}\\\\n\\"},\\"@openzeppelin/contracts/utils/math/Math.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Standard math utilities missing in the Solidity language.\\\\n */\\\\nlibrary Math {\\\\n /**\\\\n * @dev Muldiv operation overflow.\\\\n */\\\\n error MathOverflowedMulDiv();\\\\n\\\\n enum Rounding {\\\\n Floor, // Toward negative infinity\\\\n Ceil, // Toward positive infinity\\\\n Trunc, // Toward zero\\\\n Expand // Away from zero\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns the addition of two unsigned integers, with an overflow flag.\\\\n */\\\\n function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n unchecked {\\\\n uint256 c = a + b;\\\\n if (c < a) return (false, 0);\\\\n return (true, c);\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\\\n */\\\\n function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n unchecked {\\\\n if (b > a) return (false, 0);\\\\n return (true, a - b);\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\\\n */\\\\n function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n unchecked {\\\\n // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n // benefit is lost if \'b\' is also tested.\\\\n // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n if (a == 0) return (true, 0);\\\\n uint256 c = a * b;\\\\n if (c / a != b) return (false, 0);\\\\n return (true, c);\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns the division of two unsigned integers, with a division by zero flag.\\\\n */\\\\n function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n unchecked {\\\\n if (b == 0) return (false, 0);\\\\n return (true, a / b);\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\\\n */\\\\n function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n unchecked {\\\\n if (b == 0) return (false, 0);\\\\n return (true, a % b);\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns the largest of two numbers.\\\\n */\\\\n function max(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n return a > b ? a : b;\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns the smallest of two numbers.\\\\n */\\\\n function min(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n return a < b ? a : b;\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns the average of two numbers. The result is rounded towards\\\\n * zero.\\\\n */\\\\n function average(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n // (a + b) / 2 can overflow.\\\\n return (a & b) + (a ^ b) / 2;\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns the ceiling of the division of two numbers.\\\\n *\\\\n * This differs from standard division with `/` in that it rounds towards infinity instead\\\\n * of rounding towards zero.\\\\n */\\\\n function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n if (b == 0) {\\\\n // Guarantee the same behavior as in a regular Solidity division.\\\\n return a / b;\\\\n }\\\\n\\\\n // (a + b - 1) / b can overflow on addition, so we distribute.\\\\n return a == 0 ? 0 : (a - 1) / b + 1;\\\\n }\\\\n\\\\n /**\\\\n * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\\\n * denominator == 0.\\\\n * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\\\n * Uniswap Labs also under MIT license.\\\\n */\\\\n function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\\\n unchecked {\\\\n // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\\\n // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\\\n // variables such that product = prod1 * 2^256 + prod0.\\\\n uint256 prod0 = x * y; // Least significant 256 bits of the product\\\\n uint256 prod1; // Most significant 256 bits of the product\\\\n assembly {\\\\n let mm := mulmod(x, y, not(0))\\\\n prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\\\n }\\\\n\\\\n // Handle non-overflow cases, 256 by 256 division.\\\\n if (prod1 == 0) {\\\\n // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\\\n // The surrounding unchecked block does not change this fact.\\\\n // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\\\n return prod0 / denominator;\\\\n }\\\\n\\\\n // Make sure the result is less than 2^256. Also prevents denominator == 0.\\\\n if (denominator <= prod1) {\\\\n revert MathOverflowedMulDiv();\\\\n }\\\\n\\\\n ///////////////////////////////////////////////\\\\n // 512 by 256 division.\\\\n ///////////////////////////////////////////////\\\\n\\\\n // Make division exact by subtracting the remainder from [prod1 prod0].\\\\n uint256 remainder;\\\\n assembly {\\\\n // Compute remainder using mulmod.\\\\n remainder := mulmod(x, y, denominator)\\\\n\\\\n // Subtract 256 bit number from 512 bit number.\\\\n prod1 := sub(prod1, gt(remainder, prod0))\\\\n prod0 := sub(prod0, remainder)\\\\n }\\\\n\\\\n // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\\\n // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\\\n\\\\n uint256 twos = denominator & (0 - denominator);\\\\n assembly {\\\\n // Divide denominator by twos.\\\\n denominator := div(denominator, twos)\\\\n\\\\n // Divide [prod1 prod0] by twos.\\\\n prod0 := div(prod0, twos)\\\\n\\\\n // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\\\n twos := add(div(sub(0, twos), twos), 1)\\\\n }\\\\n\\\\n // Shift in bits from prod1 into prod0.\\\\n prod0 |= prod1 * twos;\\\\n\\\\n // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\\\n // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\\\n // four bits. That is, denominator * inv = 1 mod 2^4.\\\\n uint256 inverse = (3 * denominator) ^ 2;\\\\n\\\\n // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also\\\\n // works in modular arithmetic, doubling the correct bits in each step.\\\\n inverse *= 2 - denominator * inverse; // inverse mod 2^8\\\\n inverse *= 2 - denominator * inverse; // inverse mod 2^16\\\\n inverse *= 2 - denominator * inverse; // inverse mod 2^32\\\\n inverse *= 2 - denominator * inverse; // inverse mod 2^64\\\\n inverse *= 2 - denominator * inverse; // inverse mod 2^128\\\\n inverse *= 2 - denominator * inverse; // inverse mod 2^256\\\\n\\\\n // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\\\n // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\\\n // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\\\\n // is no longer required.\\\\n result = prod0 * inverse;\\\\n return result;\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\\\n */\\\\n function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\\\n uint256 result = mulDiv(x, y, denominator);\\\\n if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\\\n result += 1;\\\\n }\\\\n return result;\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\\\n * towards zero.\\\\n *\\\\n * Inspired by Henry S. Warren, Jr.\'s \\\\\\"Hacker\'s Delight\\\\\\" (Chapter 11).\\\\n */\\\\n function sqrt(uint256 a) internal pure returns (uint256) {\\\\n if (a == 0) {\\\\n return 0;\\\\n }\\\\n\\\\n // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\\\n //\\\\n // We know that the \\\\\\"msb\\\\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\\\n // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\\\n //\\\\n // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\\\n // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\\\n // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\\\n //\\\\n // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\\\n uint256 result = 1 << (log2(a) >> 1);\\\\n\\\\n // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\\\n // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\\\\n // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\\\n // into the expected uint128 result.\\\\n unchecked {\\\\n result = (result + a / result) >> 1;\\\\n result = (result + a / result) >> 1;\\\\n result = (result + a / result) >> 1;\\\\n result = (result + a / result) >> 1;\\\\n result = (result + a / result) >> 1;\\\\n result = (result + a / result) >> 1;\\\\n result = (result + a / result) >> 1;\\\\n return min(result, a / result);\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @notice Calculates sqrt(a), following the selected rounding direction.\\\\n */\\\\n function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\\\n unchecked {\\\\n uint256 result = sqrt(a);\\\\n return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Return the log in base 2 of a positive value rounded towards zero.\\\\n * Returns 0 if given 0.\\\\n */\\\\n function log2(uint256 value) internal pure returns (uint256) {\\\\n uint256 result = 0;\\\\n unchecked {\\\\n if (value >> 128 > 0) {\\\\n value >>= 128;\\\\n result += 128;\\\\n }\\\\n if (value >> 64 > 0) {\\\\n value >>= 64;\\\\n result += 64;\\\\n }\\\\n if (value >> 32 > 0) {\\\\n value >>= 32;\\\\n result += 32;\\\\n }\\\\n if (value >> 16 > 0) {\\\\n value >>= 16;\\\\n result += 16;\\\\n }\\\\n if (value >> 8 > 0) {\\\\n value >>= 8;\\\\n result += 8;\\\\n }\\\\n if (value >> 4 > 0) {\\\\n value >>= 4;\\\\n result += 4;\\\\n }\\\\n if (value >> 2 > 0) {\\\\n value >>= 2;\\\\n result += 2;\\\\n }\\\\n if (value >> 1 > 0) {\\\\n result += 1;\\\\n }\\\\n }\\\\n return result;\\\\n }\\\\n\\\\n /**\\\\n * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\\\n * Returns 0 if given 0.\\\\n */\\\\n function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\\\n unchecked {\\\\n uint256 result = log2(value);\\\\n return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Return the log in base 10 of a positive value rounded towards zero.\\\\n * Returns 0 if given 0.\\\\n */\\\\n function log10(uint256 value) internal pure returns (uint256) {\\\\n uint256 result = 0;\\\\n unchecked {\\\\n if (value >= 10 ** 64) {\\\\n value /= 10 ** 64;\\\\n result += 64;\\\\n }\\\\n if (value >= 10 ** 32) {\\\\n value /= 10 ** 32;\\\\n result += 32;\\\\n }\\\\n if (value >= 10 ** 16) {\\\\n value /= 10 ** 16;\\\\n result += 16;\\\\n }\\\\n if (value >= 10 ** 8) {\\\\n value /= 10 ** 8;\\\\n result += 8;\\\\n }\\\\n if (value >= 10 ** 4) {\\\\n value /= 10 ** 4;\\\\n result += 4;\\\\n }\\\\n if (value >= 10 ** 2) {\\\\n value /= 10 ** 2;\\\\n result += 2;\\\\n }\\\\n if (value >= 10 ** 1) {\\\\n result += 1;\\\\n }\\\\n }\\\\n return result;\\\\n }\\\\n\\\\n /**\\\\n * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\\\n * Returns 0 if given 0.\\\\n */\\\\n function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\\\n unchecked {\\\\n uint256 result = log10(value);\\\\n return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Return the log in base 256 of a positive value rounded towards zero.\\\\n * Returns 0 if given 0.\\\\n *\\\\n * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\\\n */\\\\n function log256(uint256 value) internal pure returns (uint256) {\\\\n uint256 result = 0;\\\\n unchecked {\\\\n if (value >> 128 > 0) {\\\\n value >>= 128;\\\\n result += 16;\\\\n }\\\\n if (value >> 64 > 0) {\\\\n value >>= 64;\\\\n result += 8;\\\\n }\\\\n if (value >> 32 > 0) {\\\\n value >>= 32;\\\\n result += 4;\\\\n }\\\\n if (value >> 16 > 0) {\\\\n value >>= 16;\\\\n result += 2;\\\\n }\\\\n if (value >> 8 > 0) {\\\\n result += 1;\\\\n }\\\\n }\\\\n return result;\\\\n }\\\\n\\\\n /**\\\\n * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\\\n * Returns 0 if given 0.\\\\n */\\\\n function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\\\n unchecked {\\\\n uint256 result = log256(value);\\\\n return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\\\n */\\\\n function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\\\n return uint8(rounding) % 2 == 1;\\\\n }\\\\n}\\\\n\\"},\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Standard signed math utilities missing in the Solidity language.\\\\n */\\\\nlibrary SignedMath {\\\\n /**\\\\n * @dev Returns the largest of two signed numbers.\\\\n */\\\\n function max(int256 a, int256 b) internal pure returns (int256) {\\\\n return a > b ? a : b;\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns the smallest of two signed numbers.\\\\n */\\\\n function min(int256 a, int256 b) internal pure returns (int256) {\\\\n return a < b ? a : b;\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns the average of two signed numbers without overflow.\\\\n * The result is rounded towards zero.\\\\n */\\\\n function average(int256 a, int256 b) internal pure returns (int256) {\\\\n // Formula from the book \\\\\\"Hacker\'s Delight\\\\\\"\\\\n int256 x = (a & b) + ((a ^ b) >> 1);\\\\n return x + (int256(uint256(x) >> 255) & (a ^ b));\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns the absolute unsigned value of a signed value.\\\\n */\\\\n function abs(int256 n) internal pure returns (uint256) {\\\\n unchecked {\\\\n // must be unchecked in order to support `n = type(int256).min`\\\\n return uint256(n >= 0 ? n : -n);\\\\n }\\\\n }\\\\n}\\\\n\\"},\\"@openzeppelin/contracts/utils/Nonces.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\\\n */\\\\nabstract contract Nonces {\\\\n /**\\\\n * @dev The nonce used for an `account` is not the expected current nonce.\\\\n */\\\\n error InvalidAccountNonce(address account, uint256 currentNonce);\\\\n\\\\n mapping(address account => uint256) private _nonces;\\\\n\\\\n /**\\\\n * @dev Returns the next unused nonce for an address.\\\\n */\\\\n function nonces(address owner) public view virtual returns (uint256) {\\\\n return _nonces[owner];\\\\n }\\\\n\\\\n /**\\\\n * @dev Consumes a nonce.\\\\n *\\\\n * Returns the current value and increments nonce.\\\\n */\\\\n function _useNonce(address owner) internal virtual returns (uint256) {\\\\n // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\\\n // decremented or reset. This guarantees that the nonce never overflows.\\\\n unchecked {\\\\n // It is important to do x++ and not ++x here.\\\\n return _nonces[owner]++;\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\\\n */\\\\n function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\\\n uint256 current = _useNonce(owner);\\\\n if (nonce != current) {\\\\n revert InvalidAccountNonce(owner, current);\\\\n }\\\\n }\\\\n}\\\\n\\"},\\"@openzeppelin/contracts/utils/ShortStrings.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {StorageSlot} from \\\\\\"./StorageSlot.sol\\\\\\";\\\\n\\\\n// | string | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA |\\\\n// | length | 0x BB |\\\\ntype ShortString is bytes32;\\\\n\\\\n/**\\\\n * @dev This library provides functions to convert short memory strings\\\\n * into a `ShortString` type that can be used as an immutable variable.\\\\n *\\\\n * Strings of arbitrary length can be optimized using this library if\\\\n * they are short enough (up to 31 bytes) by packing them with their\\\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\\\n * fallback mechanism can be used for every other case.\\\\n *\\\\n * Usage example:\\\\n *\\\\n * ```solidity\\\\n * contract Named {\\\\n * using ShortStrings for *;\\\\n *\\\\n * ShortString private immutable _name;\\\\n * string private _nameFallback;\\\\n *\\\\n * constructor(string memory contractName) {\\\\n * _name = contractName.toShortStringWithFallback(_nameFallback);\\\\n * }\\\\n *\\\\n * function name() external view returns (string memory) {\\\\n * return _name.toStringWithFallback(_nameFallback);\\\\n * }\\\\n * }\\\\n * ```\\\\n */\\\\nlibrary ShortStrings {\\\\n // Used as an identifier for strings longer than 31 bytes.\\\\n bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\\\n\\\\n error StringTooLong(string str);\\\\n error InvalidShortString();\\\\n\\\\n /**\\\\n * @dev Encode a string of at most 31 chars into a `ShortString`.\\\\n *\\\\n * This will trigger a `StringTooLong` error is the input string is too long.\\\\n */\\\\n function toShortString(string memory str) internal pure returns (ShortString) {\\\\n bytes memory bstr = bytes(str);\\\\n if (bstr.length > 31) {\\\\n revert StringTooLong(str);\\\\n }\\\\n return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\\\n }\\\\n\\\\n /**\\\\n * @dev Decode a `ShortString` back to a \\\\\\"normal\\\\\\" string.\\\\n */\\\\n function toString(ShortString sstr) internal pure returns (string memory) {\\\\n uint256 len = byteLength(sstr);\\\\n // using `new string(len)` would work locally but is not memory safe.\\\\n string memory str = new string(32);\\\\n /// @solidity memory-safe-assembly\\\\n assembly {\\\\n mstore(str, len)\\\\n mstore(add(str, 0x20), sstr)\\\\n }\\\\n return str;\\\\n }\\\\n\\\\n /**\\\\n * @dev Return the length of a `ShortString`.\\\\n */\\\\n function byteLength(ShortString sstr) internal pure returns (uint256) {\\\\n uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\\\n if (result > 31) {\\\\n revert InvalidShortString();\\\\n }\\\\n return result;\\\\n }\\\\n\\\\n /**\\\\n * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\\\n */\\\\n function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\\\n if (bytes(value).length < 32) {\\\\n return toShortString(value);\\\\n } else {\\\\n StorageSlot.getStringSlot(store).value = value;\\\\n return ShortString.wrap(FALLBACK_SENTINEL);\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\\\n */\\\\n function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\\\n if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\\\n return toString(value);\\\\n } else {\\\\n return store;\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\\\n * {setWithFallback}.\\\\n *\\\\n * WARNING: This will return the \\\\\\"byte length\\\\\\" of the string. This may not reflect the actual length in terms of\\\\n * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\\\n */\\\\n function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\\\n if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\\\n return byteLength(value);\\\\n } else {\\\\n return bytes(store).length;\\\\n }\\\\n }\\\\n}\\\\n\\"},\\"@openzeppelin/contracts/utils/StorageSlot.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\n/**\\\\n * @dev Library for reading and writing primitive types to specific storage slots.\\\\n *\\\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\\\n *\\\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\\\n *\\\\n * Example usage to set ERC1967 implementation slot:\\\\n * ```solidity\\\\n * contract ERC1967 {\\\\n * bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\\\n *\\\\n * function _getImplementation() internal view returns (address) {\\\\n * return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\\\n * }\\\\n *\\\\n * function _setImplementation(address newImplementation) internal {\\\\n * require(newImplementation.code.length > 0);\\\\n * StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\\\n * }\\\\n * }\\\\n * ```\\\\n */\\\\nlibrary StorageSlot {\\\\n struct AddressSlot {\\\\n address value;\\\\n }\\\\n\\\\n struct BooleanSlot {\\\\n bool value;\\\\n }\\\\n\\\\n struct Bytes32Slot {\\\\n bytes32 value;\\\\n }\\\\n\\\\n struct Uint256Slot {\\\\n uint256 value;\\\\n }\\\\n\\\\n struct StringSlot {\\\\n string value;\\\\n }\\\\n\\\\n struct BytesSlot {\\\\n bytes value;\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\\\n */\\\\n function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\\\n /// @solidity memory-safe-assembly\\\\n assembly {\\\\n r.slot := slot\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\\\n */\\\\n function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\\\n /// @solidity memory-safe-assembly\\\\n assembly {\\\\n r.slot := slot\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\\\n */\\\\n function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\\\n /// @solidity memory-safe-assembly\\\\n assembly {\\\\n r.slot := slot\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\\\n */\\\\n function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\\\n /// @solidity memory-safe-assembly\\\\n assembly {\\\\n r.slot := slot\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns an `StringSlot` with member `value` located at `slot`.\\\\n */\\\\n function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\\\n /// @solidity memory-safe-assembly\\\\n assembly {\\\\n r.slot := slot\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\\\n */\\\\n function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\\\n /// @solidity memory-safe-assembly\\\\n assembly {\\\\n r.slot := store.slot\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\\\n */\\\\n function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\\\n /// @solidity memory-safe-assembly\\\\n assembly {\\\\n r.slot := slot\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\\\n */\\\\n function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\\\n /// @solidity memory-safe-assembly\\\\n assembly {\\\\n r.slot := store.slot\\\\n }\\\\n }\\\\n}\\\\n\\"},\\"@openzeppelin/contracts/utils/Strings.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\\\n\\\\npragma solidity ^0.8.20;\\\\n\\\\nimport {Math} from \\\\\\"./math/Math.sol\\\\\\";\\\\nimport {SignedMath} from \\\\\\"./math/SignedMath.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev String operations.\\\\n */\\\\nlibrary Strings {\\\\n bytes16 private constant HEX_DIGITS = \\\\\\"0123456789abcdef\\\\\\";\\\\n uint8 private constant ADDRESS_LENGTH = 20;\\\\n\\\\n /**\\\\n * @dev The `value` string doesn\'t fit in the specified `length`.\\\\n */\\\\n error StringsInsufficientHexLength(uint256 value, uint256 length);\\\\n\\\\n /**\\\\n * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\\\n */\\\\n function toString(uint256 value) internal pure returns (string memory) {\\\\n unchecked {\\\\n uint256 length = Math.log10(value) + 1;\\\\n string memory buffer = new string(length);\\\\n uint256 ptr;\\\\n /// @solidity memory-safe-assembly\\\\n assembly {\\\\n ptr := add(buffer, add(32, length))\\\\n }\\\\n while (true) {\\\\n ptr--;\\\\n /// @solidity memory-safe-assembly\\\\n assembly {\\\\n mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\\\n }\\\\n value /= 10;\\\\n if (value == 0) break;\\\\n }\\\\n return buffer;\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Converts a `int256` to its ASCII `string` decimal representation.\\\\n */\\\\n function toStringSigned(int256 value) internal pure returns (string memory) {\\\\n return string.concat(value < 0 ? \\\\\\"-\\\\\\" : \\\\\\"\\\\\\", toString(SignedMath.abs(value)));\\\\n }\\\\n\\\\n /**\\\\n * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\\\n */\\\\n function toHexString(uint256 value) internal pure returns (string memory) {\\\\n unchecked {\\\\n return toHexString(value, Math.log256(value) + 1);\\\\n }\\\\n }\\\\n\\\\n /**\\\\n * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\\\n */\\\\n function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\\\n uint256 localValue = value;\\\\n bytes memory buffer = new bytes(2 * length + 2);\\\\n buffer[0] = \\\\\\"0\\\\\\";\\\\n buffer[1] = \\\\\\"x\\\\\\";\\\\n for (uint256 i = 2 * length + 1; i > 1; --i) {\\\\n buffer[i] = HEX_DIGITS[localValue & 0xf];\\\\n localValue >>= 4;\\\\n }\\\\n if (localValue != 0) {\\\\n revert StringsInsufficientHexLength(value, length);\\\\n }\\\\n return string(buffer);\\\\n }\\\\n\\\\n /**\\\\n * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\\\n * representation.\\\\n */\\\\n function toHexString(address addr) internal pure returns (string memory) {\\\\n return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\\\n }\\\\n\\\\n /**\\\\n * @dev Returns true if the two strings are equal.\\\\n */\\\\n function equal(string memory a, string memory b) internal pure returns (bool) {\\\\n return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\\\n }\\\\n}\\\\n\\"},\\"contracts/TokenExchange.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: GPL-3.0\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Nonces.sol\\\\\\";\\\\n\\\\n// utils/cryptography/EIP712.sol\\\\\\";\\\\n//IERC20Permit\\\\ncontract TokenExchange is EIP712, Nonces {\\\\n bytes32 private constant PERMIT_TYPEHASH =\\\\n keccak256(\\\\\\"Swap(address owner,address tokenAddress,uint256 amountIn,uint256 price,uint256 nonce,uint256 deadline)\\\\\\");\\\\n\\\\n address public owner;\\\\n // address public operator;\\\\n string private _nameString;\\\\n mapping (address => bool ) public vaults;\\\\n mapping (address => bool) public operators;\\\\n uint256 public MAX_BTC_AMOUNT = 0.005 ether;\\\\n\\\\n event PermitAndSwap(address indexed approver, address tokenAddress, uint256 amountIn, uint256 amountOut, uint256 deadline);\\\\n event Withdrawn(address tokenAddress,address receiver,uint256 amount);\\\\n event TransferOwnership(address newOwner);\\\\n event SetOperator(address newOp,bool on);\\\\n event Received(address sender, uint256 value);\\\\n event SetVaults(address valut, bool status);\\\\n event SetMaxOutput(uint256 newValue);\\\\n\\\\n constructor(string memory contractName) EIP712(contractName, \\\\\\"1\\\\\\"){\\\\n owner = msg.sender;\\\\n _nameString = contractName;\\\\n }\\\\n\\\\n modifier onlyOwner() {\\\\n require(msg.sender == owner, \\\\\\"Only_Owner\\\\\\");\\\\n _;\\\\n }\\\\n modifier onlyOperator() {\\\\n require(operators[msg.sender], \\\\\\"Only_Operator\\\\\\");\\\\n _;\\\\n }\\\\n\\\\n function permitAndSwap(\\\\n address payable approver, //\\\\n address tokenAddress, //\\\\n uint256 amountIn, //\\\\n uint256 deadline, //\\\\n uint256 price,\\\\n uint256 amountOut, // \\\\n bytes memory permitSig,\\\\n bytes memory swapSig\\\\n ) external onlyOperator {\\\\n require(vaults[tokenAddress],\\\\\\"TokenAddress_Not_Support\\\\\\");\\\\n require(approver != address(0),\\\\\\"Approver_Not_Zero_Address\\\\\\");\\\\n require(deadline >= block.timestamp,\\\\\\"Deadline_Timeout\\\\\\");\\\\n require(amountOut <= MAX_BTC_AMOUNT && amountOut <= address(this).balance,\\\\\\"AmountOut_Illegal\\\\\\");\\\\n (bytes32 pr, bytes32 ps, uint8 pv) = splitSignature(permitSig);\\\\n IERC20Permit(tokenAddress).permit(approver, address(this), amountIn, deadline, pv, pr, ps);\\\\n \\\\n (bytes32 sr, bytes32 ss, uint8 sv) = splitSignature(swapSig);\\\\n\\\\n verifySignture(approver, tokenAddress, amountIn, price, deadline, sv, sr, ss);\\\\n\\\\n\\\\n\\\\n SafeERC20.safeTransferFrom(IERC20(tokenAddress),approver,address(this),amountIn);\\\\n\\\\n (bool success, bytes memory returnData) = approver.call{value: amountOut}(\\\\\\"\\\\\\");\\\\n require(success, string(returnData));\\\\n emit PermitAndSwap(approver, tokenAddress, amountIn, amountOut, deadline);\\\\n }\\\\n function setVaults(address valut, bool status) external onlyOwner {\\\\n vaults[valut] = status;\\\\n emit SetVaults(valut, status);\\\\n }\\\\n function withdrawERC20(address tokenAddress, address receiver, uint256 amount) external onlyOwner {\\\\n require(amount <= IERC20(tokenAddress).balanceOf(address(this)),\\\\\\"Token_Not_Enough\\\\\\");\\\\n SafeERC20.safeTransfer(IERC20(tokenAddress), receiver, amount);\\\\n emit Withdrawn(tokenAddress, receiver, amount); \\\\n }\\\\n function withdrawBTC(address payable receiver, uint256 amount) external onlyOwner {\\\\n require(amount <= address(this).balance,\\\\\\"BTC_Not_Enough\\\\\\");\\\\n require(receiver != address(0),\\\\\\"Receiver_Should_Not_Zero_Address\\\\\\");\\\\n (bool success, bytes memory returnData) = receiver.call{value: amount}(\\\\\\"\\\\\\");\\\\n require(success, string(returnData));\\\\n emit Withdrawn(address(0), receiver, amount);\\\\n }\\\\n\\\\n function transferOwnership(address newOwner) external onlyOwner {\\\\n require(newOwner != address(0),\\\\\\"Owner_Should_Not_Zero_Address\\\\\\");\\\\n owner = newOwner;\\\\n emit TransferOwnership(newOwner);\\\\n }\\\\n function setOperator(address newOp,bool _on) external onlyOwner {\\\\n require(newOp != address(0),\\\\\\"Operator_Should_Not_Zero_Address\\\\\\");\\\\n operators[newOp] = _on;\\\\n emit SetOperator(newOp,_on);\\\\n }\\\\n\\\\n function setMaxOutput(uint256 newValue) external onlyOwner {\\\\n MAX_BTC_AMOUNT = newValue;\\\\n emit SetMaxOutput(newValue);\\\\n }\\\\n function splitSignature(bytes memory sig)\\\\n internal\\\\n pure\\\\n returns (bytes32 r, bytes32 s, uint8 v)\\\\n {\\\\n require(sig.length == 65, \\\\\\"Invalid_Signature_Length\\\\\\");\\\\n\\\\n assembly {\\\\n /*\\\\n First 32 bytes stores the length of the signature\\\\n\\\\n add(sig, 32) = pointer of sig + 32\\\\n effectively, skips first 32 bytes of signature\\\\n\\\\n mload(p) loads next 32 bytes starting at the memory address p into memory\\\\n */\\\\n\\\\n // first 32 bytes, after the length prefix\\\\n r := mload(add(sig, 32))\\\\n // second 32 bytes\\\\n s := mload(add(sig, 64))\\\\n // final byte (first byte of the next 32 bytes)\\\\n v := byte(0, mload(add(sig, 96)))\\\\n }\\\\n\\\\n // implicitly return (r, s, v)\\\\n }\\\\n \\\\n function verifySignture(\\\\n address approver,\\\\n address tokenAddress,\\\\n uint256 amountIn, \\\\n uint256 price,\\\\n uint256 deadline,\\\\n uint8 v,\\\\n bytes32 r,\\\\n bytes32 s\\\\n ) internal {\\\\n bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, approver, tokenAddress, amountIn, price, _useNonce(approver), deadline));\\\\n\\\\n bytes32 hash = _hashTypedDataV4(structHash);\\\\n\\\\n address signer = ECDSA.recover(hash, v, r, s);\\\\n require(signer == approver,\\\\\\"Signer_Not_Signture_Owner\\\\\\");\\\\n }\\\\n\\\\n function nonces(address _owner) public view virtual override returns (uint256) {\\\\n return super.nonces(_owner);\\\\n }\\\\n\\\\n function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\\\n return _domainSeparatorV4();\\\\n }\\\\n\\\\n function name() public view virtual returns (string memory) {\\\\n return _nameString;\\\\n }\\\\n\\\\n receive() external payable {\\\\n emit Received(msg.sender, msg.value);\\\\n }\\\\n}\\"}},\\"settings\\":{\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"viaIR\\":true,\\"evmVersion\\":\\"paris\\",\\"outputSelection\\":{\\"*\\":{\\"*\\":[\\"abi\\",\\"evm.bytecode\\",\\"evm.deployedBytecode\\",\\"evm.methodIdentifiers\\",\\"metadata\\"],\\"\\":[\\"ast\\"]}},\\"libraries\\":{}}}"\r\n  }\r\n  ]\r\n}\n'})})]})]}),"\n",(0,a.jsx)(n.p,{children:"or"}),"\n",(0,a.jsx)(n.h3,{id:"get-contract-creator-and-creation-tx-hash",children:"Get Contract Creator and Creation Tx Hash"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:"https://api.btrscan.com/scan/api\r\n?module=contract\r\n&action=getcontractcreation\r\n&contractaddresses=0xff82b0676f7bc1038dda706374ac706a59cc2163\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Try this endpoint in your ",(0,a.jsx)(n.a,{href:"https://api.btrscan.com/scan/api?module=contract&action=getcontractcreation&contractaddresses=0xff82b0676f7bc1038dda706374ac706a59cc2163",children:"browser"})," \ud83d\udd17"]}),"\n",(0,a.jsx)(n.h3,{id:"verify-source-code-beta",children:"Verify Source Code (beta)"}),"\n",(0,a.jsx)(n.p,{children:"1\u3001Current daily limit of 100 submissions per day per user (subject to change)"}),"\n",(0,a.jsx)(n.p,{children:"2\u3001Only supports HTTP POST due to max transfer size limitations for HTTP GET"}),"\n",(0,a.jsx)(n.p,{children:'3\u3001Contracts that use "imports" will need to have the code concatenated into one file as we do not support "imports" in separate files'}),"\n",(0,a.jsx)(n.p,{children:"4\u3001List of supported solc versions, only solc version v0.4.11 and above is supported. Ex. v0.4.25+commit.59dbf8f1"}),"\n",(0,a.jsx)(n.p,{children:"5\u3001Upon successful submission you will receive a GUID (32 characters) as a receipt"}),"\n",(0,a.jsx)(n.p,{children:"6\u3001You may use this GUID to track the status of your submission"}),"\n",(0,a.jsx)(n.p,{children:"7\u3001Verified Source Codes will be displayed at the Verified Contracts page"}),"\n",(0,a.jsx)(n.h3,{id:"source-code-submission-gist-returns-a-guid-as-part-of-the-result-upon-success",children:"Source Code Submission Gist (returns a guid as part of the result upon success):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'//Submit Source Code for Verification\r\n$.ajax({\r\n \u2003type: "POST",                                    //Only POST supported\r\n\u2003 url: "//api.btrscan.com/scan/api",               //Set to the correct API url for Other Networks\r\n\u2003 data: {\r\n\u2003\u2003  apikey: $(\'#apikey\').val(),\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003          //A valid API-Key is required\r\n\u2003\u2003  module: \'contract\',\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003               //Do not change\r\n\u2003\u2003  action: \'verifysourcecode\',\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002          //Do not change\r\n\u2003\u2003  contractaddress: $(\'#contractaddress\').val(),\u2003\u2003 //Contract Address starts with 0x...\r\n\u2003\u2003  sourceCode: $(\'#sourceCode\').val(),\u2003\u2003\u2003\u2003\u2003\u2003       //Contract Source Code (Flattened if necessary)\r\n\u2003\u2003  codeformat: $(\'#codeformat\').val(),\u2003\u2003\u2003\u2003\u2003\u2003       //solidity-single-file (default) or solidity-standard-json-input (for std-input-json-format support\r\n\u2003\u2003  contractname: $(\'#contractname\').val(),\u2003\u2003\u2003\u2003     //ContractName (if codeformat=solidity-standard-json-input, then enter contractname as ex: erc20.sol:erc20)\r\n\u2003\u2003  compilerversion: $(\'#compilerversion\').val(),\u2003\u2003 //see https://api-testnet.bitlayer.org/scan/solcversions for list of support versions\r\n\u2003\u2003  optimizationUsed: $(\'#optimizationUsed\').val(),\u2003//0 = No Optimization, 1 = Optimization used (applicable when codeformat=solidity-single-file)\r\n\u2003\u2003  runs: 200,\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003                    //set to 200 as default unless otherwise (applicable when codeformat=solidity-single-file)\r\n\u2003  \u2003constructorArguements: $(\'#constructorArguements\').val(),\u2003//if applicable\r\n\u2003\u2003  evmversion: $(\'#evmVersion\').val(),\u2003\u2003\u2003\u2003\u2003\u2003       //leave blank for compiler default, homestead, tangerineWhistle, spuriousDragon, byzantium, constantinople, petersburg, istanbul (applicable when codeformat=solidity-single-file)\r\n\u2003\u2003  licenseType: $(\'#licenseType\').val(),\u2003\u2003\u2003\u2003\u2003      //Valid codes 1-12 where 1=No License .. 12=Apache 2.0, see https://api-testnet.bitlayer.org/scan/contract-license-types\r\n\u2003 },\r\n\u2003 success: function (result) {\r\n\u2003\u2003  console.log(result);\r\n\u2003\u2003  if (result.status == "1") {\r\n\u2003\u2003\u2003   //1 = submission success, use the guid returned (result.result) to check the status of your submission.\r\n\u2003\u2003\u2003   // Average time of processing is 30-60 seconds\r\n\u2003\u2003\u2003   document.getElementById("postresult").innerHTML = result.status + ";" + result.message + ";" + result.result;\r\n\u2003\u2003\u2003   // result.result is the GUID receipt for the submission, you can use this guid for checking the verification status\r\n\u2003\u2003  } else {\r\n\u2003\u2003\u2003  //0 = error\r\n\u2003\u2003\u2003  document.getElementById("postresult").innerHTML = result.status + ";" + result.message + ";" + result.result;\r\n\u2003\u2003  }\r\n\u2003\u2003  console.log("status : " + result.status);\r\n\u2003\u2003  console.log("result : " + result.result);\r\n\u2003 },\r\n\u2003 error: function (result) {\r\n\u2003\u2003  console.log("error!");\r\n\u2003\u2003  document.getElementById("postresult").innerHTML = "Unexpected Error"\r\n\u2003 }\r\n});\n'})}),"\n",(0,a.jsx)(n.h3,{id:"check-source-code-verification-submission-status",children:"Check Source code verification submission status:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'//Check Source Code Verification Status\r\n$.ajax({\r\n  type: "GET",\r\n  url: "https://api-testnet.bitlayer.org/scan/api",\r\n  data: {\r\n  \u2003\u2003apikey: $(\'#apikey\').val(),\r\n  \u2003\u2003guid: \'ezq878u486pzijkvvmerl6a9mzwhv6sefgvqi5tkwceejc7tvn\', //Replace with your Source Code GUID receipt above\r\n  \u2003\u2003module: "contract",\r\n  \u2003\u2003action: "checkverifystatus"\r\n  },\r\n  success: function (result) {\r\n  \u2003\u2003console.log("status : " + result.status);      //0=pending 1=pass 2=fail\r\n  \u2003\u2003console.log("message : " + result.message);    //Pass - Verified, Fail - Unable to verify Pending in queue\r\n  \u2003\u2003console.log("result : " + result.result);      //result explanation\r\n  \u2003\u2003$(\'#guidstatus\').html(">> " + result.result);\r\n  },\r\n  error: function (result) {\r\n  \u2003\u2003alert(\'error\');\r\n  }\r\n});\n'})}),"\n",(0,a.jsx)(n.h2,{id:"verify-proxy-contract",children:"Verify Proxy Contract"}),"\n",(0,a.jsx)(n.p,{children:"Submits a proxy contract source code to Btrscan for verification."}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Requires a valid Btrscan API key, it will be rejected otherwise"}),"\n",(0,a.jsx)(n.li,{children:"Current daily limit of 100 submissions per day per user (subject to change)"}),"\n",(0,a.jsx)(n.li,{children:"Only supports HTTP post"}),"\n",(0,a.jsx)(n.li,{children:"Upon successful submission you will receive a GUID (32 characters) as a receipt"}),"\n",(0,a.jsx)(n.li,{children:"You may use this GUID to track the status of your submission"}),"\n",(0,a.jsx)(n.li,{children:'Verified proxy contracts will display the "Read/Write as Proxy" of the implementation contract under the contract address\'s contract tab'}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"verifying-proxy-contract-using-curl",children:"Verifying Proxy Contract using cURL"}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(o.A,{value:"request",label:"Request",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'// example with only the mandatory contract address parameter\r\ncurl -d "address=0xcbdcd3815b5f975e1a2c944a9b2cd1c985a1cb7f" "https://api.btrscan.com/scan/api?module=contract&action=verifyproxycontract"\r\n\r\n// example using the expectedimplementation optional parameter\r\n// the expectedimplementation enforces a check to ensure the returned implementation contract address == address picked up by the verifier\r\ncurl -d "address=0xbc46363a7669f6e12353fa95bb067aead3675c29&expectedimplementation=0xe45a5176bc0f2c1198e2451c4e4501d4ed9b65a6" "https://api.btrscan.com/scan/api?module=contract&action=verifyproxycontract"\n'})})}),(0,a.jsx)(o.A,{value:"response",label:"Response",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'// OK\r\n{"status":"1","message":"OK","result":"4c55dd6a079a4a8d9c3c736911252391"}\r\n\r\n// NOTOK\r\n{"status":"0","message":"NOTOK","result":"Invalid address hash"}\n'})})})]}),"\n",(0,a.jsx)(n.h3,{id:"checking-proxy-contract-verification-submission-status-using-curl",children:"Checking Proxy Contract Verification Submission Status using cURL"}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(o.A,{value:"request",label:"Request",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'curl "https://api.btrscan.com/scan/api?module=contract&action=checkproxyverification&guid=4c55dd6a079a4a8d9c3c736911252391"\n'})})}),(0,a.jsx)(o.A,{value:"response",label:"Response",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'// OK\r\n{"status":"1","message":"OK","result":"The proxy\'s (0xbc46363a7669f6e12353fa95bb067aead3675c29) implementation contract is found at 0xe45a5176bc0f2c1198e2451c4e4501d4ed9b65a6 and is successfully updated."}\r\n                                  \r\n// NOTOK\r\n{"status":"0","message":"NOTOK","result":"A corresponding implementation contract was unfortunately not detected for the proxy address."}\n'})})})]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},9329:(e,n,t)=>{t.d(n,{A:()=>i});t(6540);var r=t(8215);const a={tabItem:"tabItem_Ymn6"};var s=t(4848);function i(e){let{children:n,hidden:t,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,i),hidden:t,children:n})}},5537:(e,n,t)=>{t.d(n,{A:()=>x});var r=t(6540),a=t(8215),s=t(5627),i=t(6347),o=t(372),l=t(604),u=t(1861),d=t(8749);function c(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return c(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}(t);return function(e){const n=(0,u.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const a=(0,i.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(a.location.search);n.set(s,e),a.replace({...a.location,search:n.toString()})}),[s,a])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,s=h(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:s}))),[u,c]=m({queryString:t,groupId:a}),[f,y]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,s]=(0,d.Dv)(t);return[a,(0,r.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:a}),g=(()=>{const e=u??f;return p({value:e,tabValues:s})?e:null})();(0,o.A)((()=>{g&&l(g)}),[g]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),y(e)}),[c,y,s]),tabValues:s}}var y=t(9136);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=t(4848);function b(e){let{className:n,block:t,selectedValue:r,selectValue:i,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:u}=(0,s.a_)(),d=e=>{const n=e.currentTarget,t=l.indexOf(n),a=o[t].value;a!==r&&(u(n),i(a))},c=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>{l.push(e)},onKeyDown:c,onClick:d,...s,className:(0,a.A)("tabs__item",g.tabItem,s?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function w(e){let{lazy:n,children:t,selectedValue:s}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function S(e){const n=f(e);return(0,v.jsxs)("div",{className:(0,a.A)("tabs-container",g.tabList),children:[(0,v.jsx)(b,{...n,...e}),(0,v.jsx)(w,{...n,...e})]})}function x(e){const n=(0,y.A)();return(0,v.jsx)(S,{...e,children:c(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(6540);const a={},s=r.createContext(a);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);