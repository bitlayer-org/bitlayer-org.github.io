"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3911],{8453:(e,t,i)=>{i.d(t,{R:()=>o,x:()=>s});var n=i(6540);const r={},a=n.createContext(r);function o(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(a.Provider,{value:t},e.children)}},9471:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"BitVMBridge/how-to-integrate","title":"Integrating New Target Chains with BitVM Bridge","description":"Introduction to Bitlayer\'s BitVM Bridge","source":"@site/docs/BitVMBridge/how-to-integrate.md","sourceDirName":"BitVMBridge","slug":"/BitVMBridge/how-to-integrate","permalink":"/docs/BitVMBridge/how-to-integrate","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"sidebar_label":"Integrating New Target Chains with BitVM Bridge"},"sidebar":"bitVMBridgeSidebar","previous":{"title":"System Design","permalink":"/docs/BitVMBridge/system-design"},"next":{"title":"Safety and Liveness","permalink":"/docs/BitVMBridge/safety-and-liveness"}}');var r=i(4848),a=i(8453);const o={sidebar_position:4,sidebar_label:"Integrating New Target Chains with BitVM Bridge"},s="Integrating New Target Chains with BitVM Bridge",c={},l=[{value:"Introduction to Bitlayer&#39;s BitVM Bridge",id:"introduction-to-bitlayers-bitvm-bridge",level:2},{value:"Core Integration Components",id:"core-integration-components",level:2},{value:"1. Target Chain Light Client in a zkVM Program",id:"1-target-chain-light-client-in-a-zkvm-program",level:3},{value:"2. Bitcoin Light Client in the Target Chain&#39;s Bridge Contract (Contract B)",id:"2-bitcoin-light-client-in-the-target-chains-bridge-contract-contract-b",level:3},{value:"Conclusion",id:"conclusion",level:2}];function h(e){const t={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"integrating-new-target-chains-with-bitvm-bridge",children:"Integrating New Target Chains with BitVM Bridge"})}),"\n",(0,r.jsx)(t.h2,{id:"introduction-to-bitlayers-bitvm-bridge",children:"Introduction to Bitlayer's BitVM Bridge"}),"\n",(0,r.jsx)(t.p,{children:"Bitlayer's BitVM Bridge is a cutting-edge solution designed to facilitate the movement of Bitcoin assets to a diverse array of blockchain ecosystems. This interoperability unlocks a multitude of decentralized finance (DeFi) and yielding opportunities for Bitcoin holders. The bridge supports a multi-chain architecture, encompassing both Layer 1 (L1) blockchains such as Ethereum, Cardano, Sui, Plume, Sonic SVM, and Solana, as well as Layer 2 (L2) solutions including Bitlayer Network, Base, Arbitrum, and Starknet, among others."}),"\n",(0,r.jsx)(t.p,{children:"The core strength of the BitVM Bridge lies in its extensible design, which simplifies the process of integrating new target chains. This document provides a comprehensive guide for developers from the Bitlayer community who wish to extend the bridge's capabilities by adding support for a new target blockchain."}),"\n",(0,r.jsx)(t.h2,{id:"core-integration-components",children:"Core Integration Components"}),"\n",(0,r.jsx)(t.p,{children:"To successfully integrate a new target chain with the Bitlayer BitVM Bridge, developers need to implement and provide two primary components:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Target Chain Light Client (in Rust for zkVM):"})," This is a light client implementation for the new target chain, written in the Rust programming language. A critical requirement is that this light client must be capable of running within a Zero-Knowledge Virtual Machine (zkVM) environment, specifically Risc0 or SP1. The integrity and correctness of this light client's operations are cryptographically secured through the verification of zero-knowledge proofs (ZKPs) generated by the zkVM."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Bridge Contract (on the Target Chain):"}),' This smart contract, referred to as "Contract B" in architectural diagrams, must be deployed on the new target chain. It should be written in the specific smart contract language native to that target chain (e.g., Solidity for EVM-compatible chains, Clarity for Stacks, etc.). A key feature of this bridge contract is an embedded Bitcoin light client, enabling it to verify events and state changes occurring on the Bitcoin network.']}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Let's delve into the specifics of each component, using Ethereum integration as an illustrative example."}),"\n",(0,r.jsx)(t.h3,{id:"1-target-chain-light-client-in-a-zkvm-program",children:"1. Target Chain Light Client in a zkVM Program"}),"\n",(0,r.jsx)(t.p,{children:"The primary function of the target chain light client running within the zkVM is to verify the state and consensus of the target chain in a trust-minimized manner. For instance, a typical Ethereum light client needs to validate the aggregated BLS signatures from its sync committee, which consists of 512 validators."}),"\n",(0,r.jsx)(t.p,{children:"The power of zkVMs like Risc0 and SP1 is that they allow developers to write this complex verification logic in a general-purpose language like Rust, rather than being constrained by the limitations of Bitcoin Script. The zkVM executes the Rust code and produces a succinct ZKP, proving that the light client logic was executed correctly. This ZKP can then be efficiently verified, ensuring the integrity of the cross-chain communication."}),"\n",(0,r.jsx)(t.p,{children:"Numerous open-source Rust implementations of Ethereum light clients can serve as valuable references or starting points. Notable examples include:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Helios: Developed by a16z, Helios is a well-regarded Ethereum light client written in Rust. (See Helios GitHub)"}),"\n",(0,r.jsx)(t.li,{children:"SP1 Version of Helios: Succinct Labs has also created a version of Helios specifically adapted for the SP1 zkVM, demonstrating the feasibility of this approach. (See SP1 Helios GitHub)"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Contribution Process:"}),"\n",(0,r.jsx)(t.p,{children:"Currently, the integration and maintenance of target chain light clients are managed by the Bitlayer core team. Developers aiming to integrate a new target chain will need to collaborate closely with the Bitlayer team to have their Rust-based light client reviewed and merged into the official BitVM Bridge repository. We are actively working towards open-sourcing the entire BitVM Bridge infrastructure. Once open-sourced, developers will be able to propose integrations via standard GitHub pull requests."}),"\n",(0,r.jsx)(t.h3,{id:"2-bitcoin-light-client-in-the-target-chains-bridge-contract-contract-b",children:"2. Bitcoin Light Client in the Target Chain's Bridge Contract (Contract B)"}),"\n",(0,r.jsx)(t.p,{children:"To enable the secure transfer of assets from Bitcoin to the target chain, the bridge contract deployed on the target chain (Contract B) must incorporate a Bitcoin light client. This embedded light client is responsible for tracking Bitcoin's block headers and verifying transaction inclusion proofs (SPV proofs) for Bitcoin transactions relevant to the bridge."}),"\n",(0,r.jsxs)(t.p,{children:["For EVM-compatible chains like Ethereum, Bitlayer utilizes a forked and adapted version of the ",(0,r.jsx)(t.strong,{children:"Summa Bitcoin Relay"}),". This battle-tested solution provides robust Bitcoin block header relay and SPV proof verification capabilities in Solidity. (See ",(0,r.jsx)(t.a,{href:"https://github.com/summa-tx/relays/tree/master/solidity",children:"Summa Bitcoin Relays GitHub"}),")"]}),"\n",(0,r.jsx)(t.p,{children:"Developing for New Target Chains:"}),"\n",(0,r.jsx)(t.p,{children:"For new target chains, especially those that are not EVM-compatible, a custom Bitcoin light client implementation within Contract B might be necessary. The specific design and implementation will depend on the smart contract language and capabilities of the target chain. Developers should engage with the Bitlayer team to discuss and architect the most suitable Bitcoin light client solution on a case-by-case basis. This collaborative approach will ensure security, efficiency, and compatibility with the overarching BitVM Bridge architecture."}),"\n",(0,r.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(t.p,{children:"Integrating a new target chain into Bitlayer's BitVM Bridge is a structured process that significantly expands the utility of Bitcoin. By developing a Rust-based light client for the zkVM and a specialized bridge contract with an embedded Bitcoin light client, developers can connect their blockchain ecosystems to Bitcoin's vast liquidity. The Bitlayer team is committed to supporting developers through this integration process and fostering a collaborative environment to build a truly interconnected multi-chain future. We encourage interested development teams to reach out to the Bitlayer team to discuss potential integrations."})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);